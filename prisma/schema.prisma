generator client {
    provider = "prisma-client"
    output   = "./generated"
    runtime  = "bun"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String          @id @default(uuid()) @db.Uuid
    email          String          @unique
    password       String
    isVerified     Boolean         @default(false) @map("is_verified")
    createdAt      DateTime        @default(now()) @map("created_at")
    updatedAt      DateTime        @updatedAt @map("updated_at")
    Session        Session[]
    Audit          Audit[]
    TwoFactorToken TwoFactorToken?

    @@map("users")
}

model Session {
    id              String   @id @default(uuid()) @db.Uuid
    userId          String   @map("user_id") @db.Uuid
    token           String
    rotationCounter Int      @default(1) @map("rotation_counter")
    ip              String?  @db.Inet
    userAgent       String?  @map("user_agent")
    revoked         Boolean  @default(false)
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @updatedAt @map("updated_at")
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model Audit {
    id        BigInt   @id @default(autoincrement())
    userId    String?  @map("user_id") @db.Uuid
    action    String
    createdAt DateTime @default(now()) @map("created_at")
    user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

    @@map("audit")
}

model TwoFactorToken {
    id        String   @id @default(uuid()) @db.Uuid
    userId    String   @unique @map("user_id") @db.Uuid
    token     String
    expiresAt DateTime @map("expires_at")
    createdAt DateTime @default(now()) @map("created_at")
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("2fa_tokens")
}
